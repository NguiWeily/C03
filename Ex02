Chapter V
Exercise 02 : ft_strcat
Exercise 02
ft_strcat
Turn-in directory : ex02/
Files to turn in : ft_strcat.c
Allowed functions : None
• Reproduce the behavior of the function strcat (man strcat).
• Here’s how it should be prototyped :
char *ft_strcat(char *dest, char *src);
and create main test code and comply norminette and don't use "for" and function as short as possible

Certainly! Here's the implementation of the `ft_strcat` function:

```c
char	*ft_strcat(char *dest, char *src)
{
	char *ptr;

	ptr = dest;
	while (*ptr)
		ptr++;
	while (*src)
		*ptr++ = *src++;
	*ptr = '\0';
	return (dest);
}
```

Explanation:
- The function takes two parameters, `dest` and `src`, which are pointers to the destination and source strings, respectively.
- A pointer `ptr` is initialized to `dest` to keep track of the current position in the destination string.
- The first `while` loop iterates through the destination string until the null terminator is encountered, moving the `ptr` pointer to the end of the string.
- The second `while` loop iterates through the source string until the null terminator is encountered. At each iteration, the character from the source string is copied to the current position of `ptr` in the destination string, and both pointers are incremented.
- Finally, the null terminator is added at the end of the concatenated string, and the modified `dest` string is returned.

Please note that this implementation assumes that the `dest` string has enough space to accommodate the concatenated result. It does not perform any bounds checking.
Certainly! Here's the main test code for the `ft_strcat` function:

```c
#include <stdio.h>

char	*ft_strcat(char *dest, char *src);

int	main(void)
{
	char dest[50] = "Hello, ";
	char *src = "world!";

	ft_strcat(dest, src);

	printf("%s\n", dest);

	return 0;
}
```

Explanation:
- In the `main` function, a destination string `dest` is declared with enough space to accommodate the concatenated result.
- A source string `src` is also declared.
- The `ft_strcat` function is called with `dest` and `src` as arguments to concatenate the strings.
- Finally, the concatenated string stored in `dest` is printed using `printf`.

Please note that the norminette compliance may depend on the specific rules and configurations of the norminette being used. It's always a good idea to double-check the output and consult the norminette documentation for any specific requirements.
